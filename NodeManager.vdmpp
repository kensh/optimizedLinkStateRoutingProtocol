-- Nodeの詳細すクラス
class NodeManager is subclass of Environment, MyPrintTestListener


instance variables

-- Node情報を保持する写像
nodes : map NodeID to Node := {|->};
inv 
  (forall id in set dom nodes & id = nodes(id).getID())
    and
  (forall n in set rng nodes & validNode(n))
    and
  (forall node1, node2 in set rng nodes & 
    node1 <> node2 => consistentNodes(node1, node2));



functions

-- 二つのNodeが競合しないかのチェック
public consistentNodes : Node * Node -> bool
consistentNodes(node1, node2) ==
  node1.getID() <> node2.getID();


operations

-- Node情報のチェック
public pure validNode : Node ==> bool
validNode(node) ==
  return
    node.getID() in set getAllNodeIDs();

-- Node情報を追加する
public addNode : Node ==> ()
addNode(node) ==
  atomic(
    nodes := nodes munion {node.getID() |-> node};
  )
pre 
  node.getID() not in set dom nodes
    and
  validNode(node)
    and
  forall n in set rng nodes & consistentNodes(node, n)
post node in set rng nodes;


-- Nodeの識別子からNode情報を取得する
public pure getNode : NodeID ==> Node
getNode(nodeID) ==
  return nodes(nodeID)
pre nodeID in set dom nodes;

-- N1を取得する
public pure getN1 : NodeID ==> set of NodeID
getN1(nodeID) ==
  return getNeighbor(nodeID)
pre nodeID in set dom nodes
post RESULT subset dom nodes;

-- N2を取得する
public pure getN2 : NodeID ==> set of NodeID
getN2(nodeID) == (
    return pseudoN2(nodeID, getN1(nodeID))
  )
pre nodeID in set dom nodes
post RESULT subset dom nodes;

-- 指定された擬似N1に対するN2を取得する
public pure pseudoN2 : NodeID * set of NodeID ==> set of NodeID
pseudoN2(nodeID, n1') == (
    dcl n2' : set of NodeID := {};
    for all nid1 in set n1' do
      n2' := n2' union { nid2 | nid2 in set getN1(nid1) & 
      	not nid2 in set n1' 
      	and not nid2 = nodeID 
      	and not nodeID in set getN1(nid2)
      	};
    return n2'
  )
pre not nodeID in set n1'
	and n1' subset dom nodes
	and nodeID in set dom nodes
post RESULT subset dom nodes
	and not nodeID in set RESULT;

-- フィルタに制限されたリンク
public pure deliverable : NodeID * set of NodeID ==> set of NodeID
deliverable(nid1, filter) == (
    dcl d : set of NodeID := getN1(nid1);
    d := d inter filter;
    return d
  )
pre not nid1 in set filter
	and filter subset dom nodes
	and nid1 in set dom nodes
post not nid1 in set RESULT
	and RESULT subset filter; 

-- 対称リンクを持っているノードの個数
public pure getD : NodeID * NodeID ==> int
getD(nodeID, nid1) == (
    return card　deliverable(nid1, getN2(nodeID))
  )
pre 
	nodeID in set dom nodes
	and nid1 in set dom nodes
post RESULT >= 0;

-- N2に属するあるノードに対して，転送を行うことが可能な唯一のノードか判定
public pure isRequired : NodeID * NodeID ==> bool
isRequired(nodeID, nid1) == (
    dcl n2 : set of NodeID := getN2(nodeID);
    dcl n2': set of NodeID := pseudoN2(nodeID, getN1(nodeID) \ {nid1});
    
    return card (n2 \ n2') > 0
	)
pre 
	nodeID in set dom nodes
	and nid1 in set dom nodes;

-- MPR集合を取得
public pure getMPR : NodeID ==> set of NodeID
getMPR(nodeID) == (
    dcl n1 : set of NodeID := getN1(nodeID);
    dcl n2 : set of NodeID := getN2(nodeID);
    dcl uncovered : set of NodeID := {};
    dcl mpr : set of NodeID := {};
    mpr := mpr union { mid | mid in set n1 & 
      isRequired(nodeID, mid) 
    };
    uncovered := n2 \ pseudoN2(nodeID, mpr);
    
    if card uncovered = 0 then 
      return mpr
    else return choose(nodeID, mpr, n1 \ mpr, uncovered)
  )
pre 
	nodeID in set dom nodes
post not nodeID in set RESULT
	and RESULT subset dom nodes; 

-- 起点:nodeID, MPR, N1内選択肢:choices, 未到達ノード:uncoveredからつぎのMPR所属を決定
public pure choose : NodeID * set of NodeID * set of NodeID * set of NodeID ==> set of NodeID
choose(nodeID, mpr, choices, uncovered) == (
		dcl maxNid :NodeID := maxd(choices, uncovered);
    dcl mpr' : set of NodeID := mpr union {maxNid};
    dcl uncovered' : set of NodeID := uncovered \ pseudoN2(nodeID, mpr union {maxNid});
		if card uncovered' = 0 then 
      return mpr'
    else return choose(nodeID, mpr', choices \ mpr', uncovered')
)
pre 
	nodeID in set dom nodes
	and mpr subset getN1(nodeID)
	and choices subset getN1(nodeID)
	and card(choices inter mpr) = 0
	and uncovered subset getN2(nodeID)
post not nodeID in set RESULT
	and RESULT subset dom nodes
	and mpr subset RESULT;

-- 最大連結ノードの割り出し
public pure maxd : set of NodeID * set of NodeID ==> NodeID
maxd(choices, uncovered) == (
		dcl maxNid : NodeID;
		dcl maxD : int := 0;
		for all nid1 in set choices do (
			dcl tempD : int := card deliverable(nid1, uncovered);
			if tempD > maxD then (
				maxD := tempD;
				maxNid := nid1;
				);
			);
		return maxNid
)
pre 
	choices subset dom nodes
	and uncovered subset dom nodes
post 
	RESULT in set dom nodes;

-- 全ノードのMPR計算
public calculateMPR : () ==> ()
calculateMPR() == (
    for all i in set getAllNodeIDs() do (
      dcl node : Node := getNode(i);
      
      node.setN1(getN1(i));
      node.setN2(getN2(i));
      node.setMPR(getMPR(i));
    );
    
);

-- ノード間送信
public send : NodeID * IsMPR ==> ()
send(nodeID, isMPR) == (
	dcl currentNode : Node := getNode(nodeID);
	
	for all nextID in set currentNode.getN1() do (
		dcl nextNode : Node := getNode(nextID);
		
		printSend(currentNode, nextNode);
		
		nextNode.setMessage(currentNode.getMessage());
		
		if not nextNode.isReceived(nodeID) then (
			
			if isMPR then (
				nextNode.setReceived(nodeID);
				send(nextID, nextID in set currentNode.getMPR());
			)
		);
	);
)
pre 
	nodeID in set dom nodes;

public printSend : Node * Node ==> ()
printSend(currentNode, nextNode) == (
		print(currentNode.getID());
		print("   ");
		print(currentNode.getMessage());
		print(" --> ");
		print(nextNode.getID() in set currentNode.getMPR());
		print("   ");
		print(nextNode.getID());
		println("");
);

public printNode : int * Node ==> ()
printNode(i, node) == (
			print("Node");
    	print(i);
    	println("->");

    	print("	MPR:");
    	for all j in set node.getMPR() do (
    		print(j);
    		print(",");
    	);
    	println("");
    	
    	print("	N1:");
    	for all j in set node.getN1() do (
    		print(j);
    		print("(");
    		print(getD(i,j));
    		print(":");
    		print(isRequired(i,j));
    		print(")");
    		print(",");
    	);
    	println("");
    	print("	N2:");
    	for all j in set node.getN2() do (
    		print(j);
    		print(",");
    	);
    	println("");
);

public printAll : () ==> ()
printAll() == (
    for all i in set getAllNodeIDs() do (
      dcl node : Node := getNode(i);
      
      node.setN1(getN1(i));
      node.setN2(getN2(i));
      node.setMPR(getMPR(i));
    
      printNode(i, node);
    );
);
end NodeManager
